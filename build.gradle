plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'jacoco'
}

group = 'com.example'
version = '1.0.0'
sourceCompatibility = '17'
targetCompatibility = '17'

repositories {
    mavenCentral()
}

ext {
    jacksonVersion = '2.15.3'
    junitVersion = '5.10.0'
    logbackVersion = '1.4.11'
}

dependencies {
    implementation "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
    implementation "ch.qos.logback:logback-classic:${logbackVersion}"
    implementation 'org.slf4j:slf4j-api:2.0.9'
    
    testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
    testImplementation 'org.mockito:mockito-core:5.6.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.6.0'
    
    implementation 'com.amazonaws:aws-lambda-java-core:1.2.3'
    implementation 'com.amazonaws:aws-lambda-java-events:3.11.3'
    implementation 'software.amazon.awssdk:sfn:2.25.35'
    implementation 'software.amazon.awssdk:s3:2.25.35'
}

application {
    mainClass = 'com.example.s3processor.lambda.S3MonitorLambda'
}

shadowJar {
    archiveBaseName = 's3-file-processor'
    archiveClassifier = ''
    archiveVersion = ''
    mergeServiceFiles()
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
}

task packageLambda(type: Zip, dependsOn: shadowJar) {
    description = 'Package Lambda functions for deployment'
    group = 'Build'

    from(zipTree(shadowJar.outputs.files.singleFile)) {
        into('/')
    }

    archiveFileName = 'lambda-deployment.zip'
    destinationDirectory = file("${buildDir}/distributions")

    doLast {
        def zipFile = file("${buildDir}/distributions/lambda-deployment.zip")
        logger.lifecycle("Lambda package created: ${zipFile.absolutePath} (${zipFile.length()} bytes)")
    }
}

build.dependsOn packageLambda

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
}
