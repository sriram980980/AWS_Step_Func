plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'jp.classmethod.aws.cloudformation' version '0.41'
}

group = 'com.example'
version = '1.0.0'
sourceCompatibility = '17'
targetCompatibility = '17'

repositories {
    mavenCentral()
}

ext {
    awsSdkVersion = '2.21.29'
    jacksonVersion = '2.15.3'
    junitVersion = '5.10.0'
    logbackVersion = '1.4.11'
    env = project.hasProperty('env') ? project.property('env') : 'dev'
}

dependencies {
    implementation platform("software.amazon.awssdk:bom:${awsSdkVersion}")
    implementation 'software.amazon.awssdk:s3'
    implementation 'software.amazon.awssdk:lambda'
    implementation 'software.amazon.awssdk:sfn'
    implementation 'software.amazon.awssdk:cloudformation'
    implementation 'software.amazon.awssdk:iam'
    
    implementation 'com.amazonaws:aws-lambda-java-core:1.2.3'
    implementation 'com.amazonaws:aws-lambda-java-events:3.11.3'
    
    implementation "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
    
    implementation "ch.qos.logback:logback-classic:${logbackVersion}"
    implementation 'org.slf4j:slf4j-api:2.0.9'
    
    testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
    testImplementation 'org.mockito:mockito-core:5.6.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.6.0'
}

application {
    mainClass = 'com.example.s3processor.lambda.S3MonitorLambda'
}

shadowJar {
    archiveBaseName = 's3-file-processor'
    archiveClassifier = ''
    archiveVersion = ''
    
    // Exclude AWS SDK from the JAR if using Lambda runtime
    dependencies {
        exclude(dependency('software.amazon.awssdk:.*'))
    }
}

test {
    useJUnitPlatform()
}

// AWS CloudFormation plugin configuration
aws {
    region = getConfigProperty('aws.region', 'us-east-1')
    profileName = getConfigProperty('aws.profile', 'default')
}

cloudFormation {
    stackName = "s3-file-processor-${env}"
    templateFile = file('src/main/resources/cloudformation/main-stack.yml')
    capabilityIam = true
    
    stackParams = [
        Environment: env,
        BucketName: getConfigProperty('s3.bucket.name', "s3-file-processor-${env}-${System.currentTimeMillis()}"),
        FileThreshold: getConfigProperty('file.threshold', '2000'),
        BatchSize: getConfigProperty('batch.size', '100'),
        ScheduleExpression: getConfigProperty('schedule.expression', 'rate(10 minutes)')
    ]
}

// Helper function to get configuration properties
def getConfigProperty(String key, String defaultValue) {
    def configFile = file("src/main/resources/config-${env}.properties")
    if (configFile.exists()) {
        def props = new Properties()
        configFile.withInputStream { props.load(it) }
        return props.getProperty(key, defaultValue)
    }
    return defaultValue
}

// Custom tasks for deployment
task packageLambda(type: Zip) {
    dependsOn shadowJar
    from shadowJar.outputs.files
    archiveFileName = 'lambda-deployment.zip'
    destinationDirectory = file('build/distributions')
}

// Validate deployment prerequisites
task validateDeployment {
    doLast {
        println "Validating deployment prerequisites for environment: ${env}"
        
        // Check AWS CLI is available
        try {
            exec {
                commandLine 'aws', '--version'
            }
        } catch (Exception e) {
            throw new GradleException("AWS CLI is not installed or not in PATH")
        }
        
        // Check AWS credentials
        try {
            exec {
                commandLine 'aws', 'sts', 'get-caller-identity',
                    '--profile', aws.profileName,
                    '--region', aws.region
            }
            println "AWS credentials validated for profile: ${aws.profileName}"
        } catch (Exception e) {
            throw new GradleException("AWS credentials not configured or invalid for profile: ${aws.profileName}")
        }
        
        println "Deployment validation completed successfully"
    }
}

// Create deployment bucket if it doesn't exist
task createDeploymentBucket {
    doLast {
        def s3Bucket = getConfigProperty('deployment.bucket', "deployment-bucket-${env}")
        println "Checking/creating deployment bucket: ${s3Bucket}"
        
        try {
            exec {
                commandLine 'aws', 's3', 'mb', "s3://${s3Bucket}",
                    '--profile', aws.profileName,
                    '--region', aws.region
                ignoreExitValue = true
            }
        } catch (Exception e) {
            println "Deployment bucket ${s3Bucket} may already exist or creation failed: ${e.message}"
        }
    }
}

// AWS deployment tasks
task deployInfrastructure {
    dependsOn validateDeployment, packageLambda, createDeploymentBucket
    doLast {
        println "Deploying infrastructure for environment: ${env}"
        
        // Upload Lambda package to S3
        def s3Bucket = getConfigProperty('deployment.bucket', "deployment-bucket-${env}")
        println "Uploading Lambda package to S3 bucket: ${s3Bucket}"
        
        exec {
            commandLine 'aws', 's3', 'cp', 
                'build/distributions/lambda-deployment.zip', 
                "s3://${s3Bucket}/lambda-deployment.zip",
                '--profile', aws.profileName,
                '--region', aws.region
        }
        
        // Deploy CloudFormation stack with proper capabilities
        def stackName = "s3-file-processor-${env}"
        def bucketName = getConfigProperty('s3.bucket.name', "s3-file-processor-${env}-${System.currentTimeMillis()}")
        
        println "Deploying CloudFormation stack: ${stackName}"
        println "Using profile: ${aws.profileName}, region: ${aws.region}"
        println "S3 bucket: ${bucketName}"
        
        exec {
            commandLine 'aws', 'cloudformation', 'deploy',
                '--template-file', 'src/main/resources/cloudformation/main-stack.yml',
                '--stack-name', stackName,
                '--parameter-overrides', 
                "Environment=${env} BucketName=${bucketName} FileThreshold=${getConfigProperty('file.threshold', '2000')} BatchSize=${getConfigProperty('batch.size', '100')} ScheduleExpression=${getConfigProperty('schedule.expression', 'rate(10 minutes)')}",
                '--capabilities', 'CAPABILITY_IAM', 'CAPABILITY_NAMED_IAM',
                '--profile', aws.profileName,
                '--region', aws.region
        }
        
        println "Deployment completed successfully for environment: ${env}"
    }
}

task validateTemplates {
    doLast {
        fileTree('src/main/resources/cloudformation').include('*.yml').each { file ->
            exec {
                println "Validating CloudFormation template: ${file.name}"
                println "Using AWS profile: ${aws.profileName}, region: ${aws.region}"
                println "Template file path: ${file.absolutePath}"
                commandLine 'aws', 'cloudformation', 'validate-template',
                    '--template-body', "file://${file.absolutePath}",
                    '--profile', aws.profileName,
                    '--region', aws.region
            }
        }
    }
}

// Test deployment configuration without AWS calls
task testDeploymentConfig {
    doLast {
        println "Testing deployment configuration for environment: ${env}"
        println "Stack name: s3-file-processor-${env}"
        println "S3 bucket: ${getConfigProperty('s3.bucket.name', "s3-file-processor-${env}-${System.currentTimeMillis()}")}"
        println "Deployment bucket: ${getConfigProperty('deployment.bucket', "deployment-bucket-${env}")}"
        println "AWS profile: ${aws.profileName}"
        println "AWS region: ${aws.region}"
        println "File threshold: ${getConfigProperty('file.threshold', '2000')}"
        println "Batch size: ${getConfigProperty('batch.size', '100')}"
        println "Schedule: ${getConfigProperty('schedule.expression', 'rate(10 minutes)')}"
        println "Template file: src/main/resources/cloudformation/main-stack.yml"
        
        def templateFile = file('src/main/resources/cloudformation/main-stack.yml')
        if (templateFile.exists()) {
            println "✅ CloudFormation template found"
        } else {
            println "❌ CloudFormation template missing"
        }
        
        def packageFile = file('build/distributions/lambda-deployment.zip')
        if (packageFile.exists()) {
            println "✅ Lambda package found"
        } else {
            println "⚠️  Lambda package not found - run packageLambda first"
        }
        
        println "Deployment configuration test completed"
    }
}

// Simple deployment test task (no AWS dependencies)
task simpleDeployTest {
    doLast {
        println "=== Deployment Configuration Test ==="
        println "Environment: ${env}"
        println "AWS Profile: ${getConfigProperty('aws.profile', 'default')}"
        println "AWS Region: ${getConfigProperty('aws.region', 'us-east-1')}"
        println "S3 Bucket: ${getConfigProperty('s3.bucket.name', "s3-file-processor-${env}")}"
        println "Deployment Bucket: ${getConfigProperty('deployment.bucket', "deployment-bucket-${env}")}"
        
        def templateFile = file('src/main/resources/cloudformation/main-stack.yml')
        println "Template exists: ${templateFile.exists()}"
        
        println "=== Configuration loaded successfully ==="
    }
}

// Environment-specific tasks
task deployDev {
    doFirst {
        project.ext.env = 'dev'
    }
    finalizedBy deployInfrastructure
}

task deployStaging {
    doFirst {
        project.ext.env = 'staging'
    }
    finalizedBy deployInfrastructure
}

task deployProd {
    doFirst {
        project.ext.env = 'prod'
    }
    finalizedBy deployInfrastructure
}
